//
//  EmojiTableViewController.swift
//  EmodjiDictionary
//
//  Created by –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–∞–∫–∞—Ä–æ–≤ on 10.10.2018.
//  Copyright ¬© 2018 –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–∞–∫–∞—Ä–æ–≤. All rights reserved.
//

import UIKit

class EmojiTableViewController: UITableViewController {
    
    var selectedEmoji: Emoji?
    var emojis: [[Emoji]] = [[
        Emoji(symbol: "üê¢", name: "–ß–µ—Ä–µ–ø–∞—Ö–∞", description: "–ó–µ–ª–µ–Ω–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞", usage: "–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
        Emoji(symbol: "üê∞", name: "–ó–∞—è—Ü", description: "–ó–∞—è—Ü —Å —É—à–∞–º–∏", usage: "–±—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
        Emoji(symbol: "üê±", name: "–ö–æ—à–∫–∞", description: "–ñ–µ–ª—Ç—ã–π –∫–æ—Ç", usage: "—Ö–∏—Ç—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"),
        Emoji(symbol: "üê∂", name: "–°–æ–±–∞–∫–∞", description: "–¢–∏–ø–∏—á–Ω—ã–π –ø–µ—Å", usage: "–æ—Ç–∫—Ä—ã—Ç–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")], [
        Emoji(symbol: "üòÄ", name: "–°–º–∞–π–ª–∏–∫", description: "–£–ª—ã–±–∞—é—â–∞—è—Å—è –º–æ—Ä–¥–æ—á–∫–∞", usage: "–ø–æ–ª–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ"),
        Emoji(symbol: "üòá", name: "–ê–Ω–≥–µ–ª", description: "–ú–æ—Ä–¥–æ—á–∫–∞ —Å –Ω–∏–º–±–æ–º", usage: "—Ö–æ—Ä–æ—à–∏–µ –ø–æ—Å—Ç—É–ø–∫–∏"),
        Emoji(symbol: "üòç", name: "–í–ª—é–±–ª–µ–Ω–Ω—ã–π", description: "–í–ª—é–±–ª–µ–Ω–Ω–∞—è –º–æ—Ä–¥–æ—á–∫–∞", usage: "—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–ª—é–±–ª–µ–Ω–Ω–æ—Å—Ç–∏")], []
    ]
    var headerTitles = ["–ñ–∏–≤–æ—Ç–Ω—ã–µ", "–°–º–∞–π–ª–∏–∫–∏", "–ù–æ–≤–æ–µ"]
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        
        dataRetrieval()
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        // Uncomment the following line to preserve selection between presentations
        // self.clearsSelectionOnViewWillAppear = false

        // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
        // self.navigationItem.rightBarButtonItem = self.editButtonItem
        navigationItem.leftBarButtonItem = editButtonItem
    }

    // MARK: - Table view data source

    override func numberOfSections(in tableView: UITableView) -> Int {
        return emojis.count
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if section == 0 || section == 1 || section == 2 {
            return emojis[section].count
        } else {
            // not implemented
            return 0
        }
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "EmojiTableViewCell", for: indexPath) as! EmojiTableViewCell

        let emoji = emojis[indexPath.section][indexPath.row]
        
//        cell.textLabel?.text = "\(emoji.symbol) - \(emoji.name)"
//        cell.detailTextLabel?.text = emoji.description
        
        cell.update(with: emoji)
        
//        cell.showsReorderControl = true

        return cell
    }
    
    override func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
        let movedEmoji = emojis[sourceIndexPath.section].remove(at: sourceIndexPath.row)
        emojis[destinationIndexPath.section].insert(movedEmoji, at: destinationIndexPath.row)
        tableView.reloadData()
    }
    
    override func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -> UITableViewCell.EditingStyle {
        return .delete
    }
    
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        if section < headerTitles.count {
            return headerTitles[section]
        }
        return nil
    }

    /*
    // Override to support conditional editing of the table view.
    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        // Return false if you do not want the specified item to be editable.
        return true
    }
    */

    // Override to support editing the table view.
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            // Delete the row from the data source
//            emojis.remove(at: indexPath.row)
            emojis[indexPath.section].remove(at: indexPath.row)
            tableView.deleteRows(at: [indexPath], with: .fade)
//            saveData()
        } else if editingStyle == .insert {
            // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
        }    
    }

    /*
    // Override to support rearranging the table view.
    override func tableView(_ tableView: UITableView, moveRowAt fromIndexPath: IndexPath, to: IndexPath) {

    }
    */

    /*
    // Override to support conditional rearranging of the table view.
    override func tableView(_ tableView: UITableView, canMoveRowAt indexPath: IndexPath) -> Bool {
        // Return false if you do not want the item to be re-orderable.
        return true
    }
    */

    // MARK: - Navigation

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "EditEmoji" {
            let indexPath = tableView.indexPathForSelectedRow!
            let emoji = emojis[indexPath.section][indexPath.row]
            let navigationController = segue.destination as! UINavigationController
            let addEditEmojiTableViewController = navigationController.topViewController! as! AddEditEmojiTableViewController
            addEditEmojiTableViewController.navigationItem.title = "Edit"
            addEditEmojiTableViewController.emoji = emoji
        }
    }

//    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
//        if segue.identifier == "EditEmoji" {
//            if let indexPath = tableView.indexPathForSelectedRow {
//                let NC = segue.destination as! UINavigationController
//                let DVC = NC.topViewController as! AddEditEmojiTableViewController
//                DVC.emoji = emojis[indexPath.section][indexPath.row]
//            }
//        }
//    }

    //MARK: UITableViewDelegate
//    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        let emoji = emojis[indexPath.section][indexPath.row]
//
//        print("\(emoji.symbol) - \(indexPath)")
//    }
    
    @IBAction func unwindToEmogiTableViewController(segue: UIStoryboardSegue) {
        guard segue.identifier == "saveUnwind" else { return }
        let sourceViewController = segue.source as! AddEditEmojiTableViewController
        let emoji = sourceViewController.emoji
        print(sourceViewController.emoji)
        
        if let selectedIndexPath = tableView.indexPathForSelectedRow {
            emojis[selectedIndexPath.section][selectedIndexPath.row] = emoji
            tableView.reloadRows(at: [selectedIndexPath], with: .none)
        } else {
//            let newIndexPath = IndexPath(row: emojis.count, section: 0)
//            emojis[newIndexPath.section].append(emoji)
//            tableView.insertRows(at: [newIndexPath], with: .automatic)
            emojis[2].append(emoji)
            tableView.reloadData()
        }
        
        saveData()
    }
    
    func dataRetrieval() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        let documentDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        let archiveURL = documentDirectory.appendingPathComponent("emojis").appendingPathExtension("plist")
//        print(archiveURL.absoluteString)
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
        let propertyListDecoder = PropertyListDecoder()
        if let data = try? Data(contentsOf: archiveURL),
            // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–º–µ—Ç–∫—É
            let decodedEmojis = try? propertyListDecoder.decode([[Emoji]].self, from: data) {
            emojis = decodedEmojis
//            print(decodedEmojis)
        }
    }
    
    func saveData() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        let documentDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        let archiveURL = documentDirectory.appendingPathComponent("emojis").appendingPathExtension("plist")
        print(archiveURL.absoluteString)
        
        // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        let propertyListEncoder = PropertyListEncoder()
        let encodereEmojis = try? propertyListEncoder.encode(emojis)
        
        //–ó–∞–ø–∏—Å—å –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–∞–π–ª
        try? encodereEmojis?.write(to: archiveURL, options: .noFileProtection)
    }

}
